import type { VNode } from "./nodes";

/**
 * Template function that takes a context object and returns a VNode
 */
export interface TemplateFunction {
  (context: Record<string, unknown>): VNode;
}

/**
 * Metadata for a cached template generated by Babel plugin
 */
export interface TemplateMetadata {
  /** Unique template identifier */
  id: string;
  /** Template function */
  template: TemplateFunction;
  /** Whether the template structure is static (optimizable) */
  staticStructure: boolean;
  /** Parameter names from forEach function */
  paramNames: string[];
}

/**
 * Template registration data from Babel plugin
 */
export interface TemplateRegistration {
  id: string;
  template: TemplateFunction;
  paramNames: string[];
  isStatic: boolean;
}

/**
 * Template binding context for forEach operations
 */
export interface TemplateContext {
  [key: string]: unknown;
}

/**
 * Optimized forEach function signature with template support
 */
export interface OptimizedForEachFunction<T> {
  (
    templateId: string,
    items: T[],
    paramNames: string[],
    fallbackMapper: (item: T, index: number) => unknown
  ): unknown[];
}