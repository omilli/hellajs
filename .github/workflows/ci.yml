name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Format code
        run: bun format

  test:
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Run tests with coverage
        run: bun coverage 2>&1 | tee coverage-output.txt
      - name: Generate coverage badge
        run: |
          echo "Coverage file content:" 
          cat coverage-output.txt
          
          COVERAGE=$(grep "All files" coverage-output.txt | awk '{print $4}')
          echo "Extracted coverage value: $COVERAGE"
          
          if [[ -z "$COVERAGE" ]]; then
            echo "Failed to extract coverage value. Using default values."
            COVERAGE="unknown"
            COLOR="gray"
          else
            # Determine color based on coverage
            if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
              COLOR=brightgreen
            elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              COLOR=green
            elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              COLOR=yellowgreen
            elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              COLOR=yellow
            else
              COLOR=red
            fi
          fi
          
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "COLOR=$COLOR" >> $GITHUB_ENV
          
          # Create the badge JSON data
          if [[ "$COVERAGE" == "unknown" ]]; then
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"unknown\",\"color\":\"$COLOR\"}" > coverage-badge.json
          else
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE}%\",\"color\":\"$COLOR\"}" > coverage-badge.json
          fi
          
      - name: Upload coverage badge data
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 6df7884e21572b4910c2f21edb658e56
          filename: hellajs-coverage.json
          label: coverage
          message: ${{ env.COVERAGE }}%
          color: ${{ env.COLOR }}

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun bundle

  bundle-size:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun bundle
      - name: Check bundle size
        run: bun bundlewatch
        env:
          BUNDLEWATCH_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI_BRANCH_BASE: master

  release:
    needs: [format, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: node
          package-name: hellajs
          token: ${{ secrets.GITHUB_TOKEN }}
          default-branch: master
            
  publish:
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.release_created }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.release.outputs.tag_name }}
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: bun install
      - name: Build
        run: bun bundle
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
