name: CI & Release

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write # Required for npm provenance via OIDC

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  check:
    name: Check & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          registry-url: "https://registry.npmjs.org"
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Format code
        run: bun format
      - name: Run tests with coverage
        run: bun coverage 2>&1 | tee coverage-output.txt
      - name: Generate coverage badge
        run: |
          COVERAGE=$(grep "All files" coverage-output.txt | awk '{print $4}')
          echo "Extracted coverage value: $COVERAGE"
          if [[ -z "$COVERAGE" ]]; then
            echo "Failed to extract coverage value. Using default values."
            COVERAGE="unknown"
            COLOR="gray"
          else
            # Determine color based on coverage
            if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
              COLOR=brightgreen
            elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              COLOR=green
            elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              COLOR=yellowgreen
            elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              COLOR=yellow
            else
              COLOR=red
            fi
          fi
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
          echo "COLOR=$COLOR" >> $GITHUB_ENV
          # Create the badge JSON data
          if [[ "$COVERAGE" == "unknown" ]]; then
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"unknown\",\"color\":\"$COLOR\"}" > coverage-badge.json
          else
            echo "{\"schemaVersion\":1,\"label\":\"coverage\",\"message\":\"${COVERAGE}%\",\"color\":\"$COLOR\"}" > coverage-badge.json
          fi
      - name: Upload coverage badge data
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: 6df7884e21572b4910c2f21edb658e56
          filename: hellajs-coverage.json
          label: coverage
          message: ${{ env.COVERAGE }}%
          color: ${{ env.COLOR }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: check
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          registry-url: "https://registry.npmjs.org"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # The `publish` script handles building and testing
          publish: bun run changeset:publish
          version: bun run changeset:version
          commit: "chore: release packages"
          title: "chore: release packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}